"use strict";(self.webpackChunkxatom_document=self.webpackChunkxatom_document||[]).push([[331],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=u(n),c=r,g=d["".concat(s,".").concat(c)]||d[c]||m[c]||i;return n?a.createElement(g,l(l({ref:t},p),{},{components:n})):a.createElement(g,l({ref:t},p))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=c;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[d]="string"==typeof e?e:r,l[1]=o;for(var u=2;u<i;u++)l[u]=n[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>l});var a=n(7294),r=n(6010);const i={tabItem:"tabItem_Ymn6"};function l(e){let{children:t,hidden:n,className:l}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(i.tabItem,l),hidden:n},t)}},4866:(e,t,n)=>{n.d(t,{Z:()=>b});var a=n(7462),r=n(7294),i=n(6010),l=n(2466),o=n(6550),s=n(1980),u=n(7392),p=n(12);function d(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function m(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??d(n);return function(e){const t=(0,u.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function c(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function g(e){let{queryString:t=!1,groupId:n}=e;const a=(0,o.k6)(),i=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,s._X)(i),(0,r.useCallback)((e=>{if(!i)return;const t=new URLSearchParams(a.location.search);t.set(i,e),a.replace({...a.location,search:t.toString()})}),[i,a])]}function k(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,i=m(e),[l,o]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!c({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:i}))),[s,u]=g({queryString:n,groupId:a}),[d,k]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,i]=(0,p.Nk)(n);return[a,(0,r.useCallback)((e=>{n&&i.set(e)}),[n,i])]}({groupId:a}),h=(()=>{const e=s??d;return c({value:e,tabValues:i})?e:null})();(0,r.useLayoutEffect)((()=>{h&&o(h)}),[h]);return{selectedValue:l,selectValue:(0,r.useCallback)((e=>{if(!c({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);o(e),u(e),k(e)}),[u,k,i]),tabValues:i}}var h=n(2389);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function N(e){let{className:t,block:n,selectedValue:o,selectValue:s,tabValues:u}=e;const p=[],{blockElementScrollPositionUntilNextRender:d}=(0,l.o5)(),m=e=>{const t=e.currentTarget,n=p.indexOf(t),a=u[n].value;a!==o&&(d(t),s(a))},c=e=>{let t=null;switch(e.key){case"Enter":m(e);break;case"ArrowRight":{const n=p.indexOf(e.currentTarget)+1;t=p[n]??p[0];break}case"ArrowLeft":{const n=p.indexOf(e.currentTarget)-1;t=p[n]??p[p.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":n},t)},u.map((e=>{let{value:t,label:n,attributes:l}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:o===t?0:-1,"aria-selected":o===t,key:t,ref:e=>p.push(e),onKeyDown:c,onClick:m},l,{className:(0,i.Z)("tabs__item",f.tabItem,l?.className,{"tabs__item--active":o===t})}),n??t)})))}function C(e){let{lazy:t,children:n,selectedValue:a}=e;const i=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=i.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},i.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function y(e){const t=k(e);return r.createElement("div",{className:(0,i.Z)("tabs-container",f.tabList)},r.createElement(N,(0,a.Z)({},e,t)),r.createElement(C,(0,a.Z)({},e,t)))}function b(e){const t=(0,h.Z)();return r.createElement(y,(0,a.Z)({key:String(t)},e))}},5272:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>g,frontMatter:()=>o,metadata:()=>u,toc:()=>d});var a=n(7462),r=(n(7294),n(3905)),i=n(4866),l=n(5162);const o={},s="REST API Client",u={unversionedId:"reference/services/RESTAPIClient",id:"reference/services/RESTAPIClient",title:"REST API Client",description:"The AxiosClient class empowers your web application to effortlessly communicate with custom REST APIs. This robust data service streamlines API interactions, providing developers with a user-friendly and flexible solution. \ud83d\udcbc",source:"@site/guide/reference/services/RESTAPIClient.mdx",sourceDirName:"reference/services",slug:"/reference/services/RESTAPIClient",permalink:"/guide/reference/services/RESTAPIClient",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"createComponent",permalink:"/guide/reference/utils/createComponent"},next:{title:"Apollo GraphQL Client",permalink:"/guide/reference/services/GraphQLClient"}},p={},d=[{value:"Getting Started",id:"getting-started",level:2},{value:"Installing the package",id:"installing-the-package",level:3},{value:"Methods",id:"methods",level:2},{value:"<code>beforeRequest((config, nxtFn) =&gt; void)</code>",id:"before-request",level:3},{value:"Parameters",id:"before-request-parameters",level:4},{value:"<code>retryRequestOnFailed((err, config, retryFn) =&gt; void)</code>",id:"retry-request",level:3},{value:"Parameters",id:"retry-request-parameters",level:4},{value:"Request Types",id:"type-of-request",level:3},{value:"Parameters",id:"request-parameters",level:4},{value:"<code>fetch(data,headers)</code>",id:"fetch-request",level:3},{value:"Parameters",id:"fetch-request-parameters",level:4},{value:"<code>onLoadingChange(fn)</code>",id:"loading-change-request",level:3},{value:"Parameters",id:"loading-change-parameters",level:4},{value:"<code>onLoadingChangeOnce(fn)</code>",id:"loading-once-change-request",level:3},{value:"Parameters",id:"loading-once-change-parameters",level:4},{value:"<code>onData(fn)</code>",id:"data-change-request",level:3},{value:"Parameters",id:"data-change-parameters",level:4},{value:"<code>onDataOnce(fn)</code>",id:"data-once-change-request",level:3},{value:"Parameters",id:"data-once-change-parameters",level:4}],m={toc:d},c="wrapper";function g(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"rest-api-client"},"REST API Client"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"AxiosClient")," class empowers your web application to effortlessly communicate with custom REST APIs. This robust data service streamlines API interactions, providing developers with a user-friendly and flexible solution. \ud83d\udcbc"),(0,r.kt)("p",null,"With ",(0,r.kt)("inlineCode",{parentName:"p"},"AxiosClient"),", you can:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\ud83d\udcdd Have complete control over request headers"),(0,r.kt)("li",{parentName:"ul"},"\ud83d\ude80 Add TypeScript support for request response and request body data"),(0,r.kt)("li",{parentName:"ul"},"\ud83d\udd17 Attach multiple listeners to events like data, error, or loading"),(0,r.kt)("li",{parentName:"ul"},"\ud83d\udc68\u200d\ud83d\udcbb Organize your UI logic based on data, error, or loading state")),(0,r.kt)("h2",{id:"getting-started"},"Getting Started"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Initialization"),": To harness the power of ",(0,r.kt)("inlineCode",{parentName:"p"},"AxiosClient")," in your xAtom project, start by installing the ",(0,r.kt)("inlineCode",{parentName:"p"},"@xatom/axios")," package. Then, initialize ",(0,r.kt)("inlineCode",{parentName:"p"},"AxiosClientConfigurator")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"AxiosClient")," as demonstrated in the example below:"),(0,r.kt)("h3",{id:"installing-the-package"},"Installing the package"),(0,r.kt)(i.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"npm",label:"npm",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Terminal"',title:'"Terminal"'},"npm install @xatom/axios\n"))),(0,r.kt)(l.Z,{value:"yarn",label:"yarn",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Terminal"',title:'"Terminal"'},"yarn add @xatom/axios\n"))),(0,r.kt)(l.Z,{value:"pnpm",label:"pnpm",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Terminal"',title:'"Terminal"'},"pnpm add @xatom/axios\n")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Example"',title:'"Example"'},'import {\n  AxiosClient,\n  AxiosClientConfigurator,\n} from "@xatom/axios";\nimport { onReady } from "@xatom/core";\n\n// Configure the base URL for your API\nconst axiosConfigurator = new AxiosClientConfigurator(\n  "https://your-api-base-url.com"\n);\n\nconst axiosClient = new AxiosClient(axiosConfigurator);\n\nonReady(() => {\n  // Define an API request to get users with pagination\n  const getUsers = axiosClient.get<MyUserType>("/users?page=2");\n\n  // Listen to loading state changes\n  getUsers.onLoadingChange((status) => {\n    console.log("Is loading:", status); // true or false\n  });\n\n  // Listen to successful response\n  getUsers.onData((data) => {\n    console.log("Response:", data);\n  });\n\n  // Listen to errors\n  getUsers.onError((error) => {\n    console.error("Error:", error);\n  });\n\n  // Initiate the API request\n  getUsers.fetch();\n});\n')),(0,r.kt)("p",null,"This example demonstrates using AxiosClient in xAtom to make an asynchronous API request, handling loading states, and logging data or errors."),(0,r.kt)("h2",{id:"methods"},"Methods"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"AxiosClient")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"AxiosClientConfigurator")," classes equip you with a robust set of properties and methods, enhancing your development experience:"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"AxiosClientConfigurator Methods")),(0,r.kt)("h3",{id:"before-request"},(0,r.kt)("inlineCode",{parentName:"h3"},"beforeRequest((config, nxtFn) => void)")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"beforeRequest()")," on ",(0,r.kt)("inlineCode",{parentName:"p"},"AxiosClientConfigurator")," method allows you to modify the configuration of the Axios client or logically control whether the request should be made to achieve secure requests."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Example"',title:'"Example"'},'// Initialize the AxiosClientConfigurator with the base API URL\nconst axiosConfigurator = new AxiosClientConfigurator(\n  "https://your-api-base-url.com"\n);\n\n// Configure a function to be executed before each request\naxiosConfigurator.beforeRequest((config, nextFn) => {\n  // Modify the request configuration, for example, add an Authorization header\n  config.headers.Authorization = "Bearer MY_TOKEN";\n\n  // Call nextFn to continue with the modified configuration\n  nextFn(config);\n});\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"beforeRequest(fn: (config: axiosConfig, nxtFn: (config: axiosConfig) => void) => void): AxiosClientConfigurator;\n")),(0,r.kt)("h4",{id:"before-request-parameters"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"fn")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"(config, nxtFn) => void")),(0,r.kt)("td",{parentName:"tr",align:null},"A function to modify the configuration or decide whether to proceed.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"config")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"axiosConfig")),(0,r.kt)("td",{parentName:"tr",align:null},"The configuration of the Axios client for the current request.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"nxtFn")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"(config: axiosConfig) => void")),(0,r.kt)("td",{parentName:"tr",align:null},"A function to proceed with the request, passing the modified config.")))),(0,r.kt)("h3",{id:"retry-request"},(0,r.kt)("inlineCode",{parentName:"h3"},"retryRequestOnFailed((err, config, retryFn) => void)")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"retryRequestOnFailed()")," method on ",(0,r.kt)("inlineCode",{parentName:"p"},"AxiosClientConfigurator")," allows you to handle request errors globally and retry the request with a new configuration of the Axios client. This is useful for scenarios like retrying requests on token expiration or timeout."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Example"',title:'"Example"'},'// Initialize the AxiosClientConfigurator with the base API URL\nconst axiosConfigurator = new AxiosClientConfigurator(\n  "https://your-api-base-url.com"\n);\n\n// Configure the retry behavior on failed requests\naxiosConfigurator.retryRequestOnFailed(\n  (err, config, retryFn) => {\n    // Check if the error is due to an expired token\n    if (err && err.message === "TOKEN_EXPIRED") {\n      // Get a new token using the refresh token\n      const newToken = getNewTokenWithRefreshToken();\n\n      // If a new token is obtained, update the Authorization header and retry the request\n      if (newToken) {\n        config.headers.Authorization = `Bearer ${newToken}`;\n        retryFn(config);\n      } else {\n        // If no new token is obtained, log out the user\n        logoutUser();\n      }\n    } else {\n      // Handle unknown errors\n    }\n  }\n);\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"retryRequestOnFailed(fn: (error: Error, config: axiosConfig, retryFn: (config: axiosConfig) => void) => void): AxiosClientConfigurator;\n")),(0,r.kt)("h4",{id:"retry-request-parameters"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"fn")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"(error, config, retryFn) => void")),(0,r.kt)("td",{parentName:"tr",align:null},"A function to handle errors and trigger a retry with a new configuration.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"error")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Error")),(0,r.kt)("td",{parentName:"tr",align:null},"The error that occurred during the initial request.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"config")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"axiosConfig")),(0,r.kt)("td",{parentName:"tr",align:null},"The configuration of the Axios client for the failed request.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"retryFn")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"(config) => void")),(0,r.kt)("td",{parentName:"tr",align:null},"A function to retry the request with a new configuration.")))),(0,r.kt)("h3",{id:"type-of-request"},"Request Types"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"AxiosClient")," provides support for various HTTP methods:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"get()")," method allows you to perform ",(0,r.kt)("inlineCode",{parentName:"li"},"GET")," requests."),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"post()")," method enables ",(0,r.kt)("inlineCode",{parentName:"li"},"POST")," requests."),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"patch()")," method facilitates ",(0,r.kt)("inlineCode",{parentName:"li"},"PATCH")," requests."),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"put()")," method is designed for making ",(0,r.kt)("inlineCode",{parentName:"li"},"PUT")," requests."),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"delete()")," method allows you to initiate ",(0,r.kt)("inlineCode",{parentName:"li"},"DELETE")," requests.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Request Type Examples"',title:'"Request',Type:!0,'Examples"':!0},'// Initialize AxiosClient with the configured AxiosClientConfigurator\nconst axiosClient = new AxiosClient(axiosConfigurator);\n\n// Example of making a GET request\nconst getUser = axiosClient.get("/user", { id: 1 });\n\n// Example of making a POST request\nconst postUser = axiosClient.post("/create/user", {\n  fullName: "John doe",\n  age: 21,\n});\n\n// Example of making a PATCH request\nconst patchUser = axiosClient.patch("/user", { id: 1, age: 22 });\n\n// Example of making a PUT request\nconst putUser = axiosClient.put("/user", {\n  id: 1,\n  bio: "I \u2764\ufe0f xAtom",\n});\n\n// Example of making a DELETE request\nconst deleteUser = axiosClient.delete("/user", { id: 1 });\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"get(path: string, requestData: Object): AxiosClientControl;\npost(path: string, requestData: Object): AxiosClientControl;\npatch(path: string, requestData: Object): AxiosClientControl;\nput(path: string, requestData: Object): AxiosClientControl;\ndelete(path: string, requestData: Object): AxiosClientControl;\n")),(0,r.kt)("h4",{id:"request-parameters"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"path")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},"Endpoint path")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"data")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Object")),(0,r.kt)("td",{parentName:"tr",align:null},"Data payload for the request")))),(0,r.kt)("h3",{id:"fetch-request"},(0,r.kt)("inlineCode",{parentName:"h3"},"fetch(data,headers)")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"fetch")," method in ",(0,r.kt)("inlineCode",{parentName:"p"},"AxiosClient")," allows you to initiate the request programmatically."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Example"',title:'"Example"'},'// Initialize AxiosClient with the configured AxiosClientConfigurator\nconst axiosClient = new AxiosClient(axiosConfigurator);\n\n// Example of making a GET request\nconst getUser = axiosClient.get("/user");\n\n// Fetch the GET request with data payload\ngetUser.fetch({ id: 1 });\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"fetch(data: Object?, headers: AxiosHeaders?): Promise<Response>;\n")),(0,r.kt)("h4",{id:"fetch-request-parameters"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"data")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Object")),(0,r.kt)("td",{parentName:"tr",align:null},"Optional data argument to send payload along with the request")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"headers")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"AxiosHeaders")),(0,r.kt)("td",{parentName:"tr",align:null},"Optional Axios headers to be sent with the request")))),(0,r.kt)("h3",{id:"loading-change-request"},(0,r.kt)("inlineCode",{parentName:"h3"},"onLoadingChange(fn)")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"onLoadingChange")," method in ",(0,r.kt)("inlineCode",{parentName:"p"},"AxiosClient")," enables you to listen to changes in the loading status of a request, indicating whether the request is in progress or completed. Your application can incorporate multiple instances of the ",(0,r.kt)("inlineCode",{parentName:"p"},"onLoadingChange")," method to handle various loading status scenarios."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Example"',title:'"Example"'},'// Initialize AxiosClient with the configured AxiosClientConfigurator\nconst axiosClient = new AxiosClient(axiosConfigurator);\n\n// Example of making a GET request\nconst getUser = axiosClient.get("/user");\n\n// Listen to request loading status changes\ngetUser.onLoadingChange((status) => {\n  console.log(status); // Output: true (request in progress) or false (request done)\n});\n\n// Fetch the GET request with data payload\ngetUser.fetch({ id: 1 });\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"onLoadingChange(fn: (status: boolean) => void): void;\n")),(0,r.kt)("h4",{id:"loading-change-parameters"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"fn")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"(status: boolean) => void")),(0,r.kt)("td",{parentName:"tr",align:null},"Listener function")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"status")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"boolean")),(0,r.kt)("td",{parentName:"tr",align:null},"Status to identify request state")))),(0,r.kt)("h3",{id:"loading-once-change-request"},(0,r.kt)("inlineCode",{parentName:"h3"},"onLoadingChangeOnce(fn)")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"onLoadingChangeOnce")," method in ",(0,r.kt)("inlineCode",{parentName:"p"},"AxiosClient")," allows you to listen for changes in the loading status of a request once, indicating whether the request is in progress or completed. This method is particularly useful when you only need to observe the loading change once, making it suitable for scenarios where the same request may be called multiple times in your application."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Example"',title:'"Example"'},'// Initialize AxiosClient with the configured AxiosClientConfigurator\nconst axiosClient = new AxiosClient(axiosConfigurator);\n\n// Example of making a GET request\nconst getUser = axiosClient.get("/user");\n\n// Listen to request loading status changes\ngetUser.onLoadingChangeOnce((status) => {\n  console.log(status); // Output: true (request in progress) or false (request done)\n});\n\n// Fetch the GET request with data payload\ngetUser.fetch({ id: 1 });\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"onLoadingChangeOnce(fn: (status: boolean) => void): void;\n")),(0,r.kt)("h4",{id:"loading-once-change-parameters"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"fn")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"(status: boolean) => void")),(0,r.kt)("td",{parentName:"tr",align:null},"Listener function")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"status")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"boolean")),(0,r.kt)("td",{parentName:"tr",align:null},"Status to identify request state")))),(0,r.kt)("h3",{id:"data-change-request"},(0,r.kt)("inlineCode",{parentName:"h3"},"onData(fn)")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"onData")," method in ",(0,r.kt)("inlineCode",{parentName:"p"},"AxiosClient")," enables you to listen to and read the success response data each time ",(0,r.kt)("inlineCode",{parentName:"p"},"fetch")," has been called. ",(0,r.kt)("inlineCode",{parentName:"p"},"onData")," will only be triggered when the request is successful. Your application can have multiple ",(0,r.kt)("inlineCode",{parentName:"p"},"onData")," callbacks."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Example"',title:'"Example"'},'// Initialize AxiosClient with the configured AxiosClientConfigurator\nconst axiosClient = new AxiosClient(axiosConfigurator);\n\n// Example of making a GET request\nconst getUser = axiosClient.get<DataType>("/user");\n\n// Listen to the request\'s success response\ngetUser.onData((data: DataType) => {\n  console.log(data); // Output: request success response\n});\n\n// Fetch the GET request with data payload\ngetUser.fetch({ id: 1 });\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"onData<DataType>(fn: (data: DataType) => void): void;\n")),(0,r.kt)("h4",{id:"data-change-parameters"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"fn")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"(data: DataType) => void")),(0,r.kt)("td",{parentName:"tr",align:null},"Listener function")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"data")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"DataType")),(0,r.kt)("td",{parentName:"tr",align:null},"Response data")))),(0,r.kt)("h3",{id:"data-once-change-request"},(0,r.kt)("inlineCode",{parentName:"h3"},"onDataOnce(fn)")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"onDataOnce")," method in ",(0,r.kt)("inlineCode",{parentName:"p"},"AxiosClient")," enables you to listen to and read the success response data once when ",(0,r.kt)("inlineCode",{parentName:"p"},"fetch")," has been called for first time. ",(0,r.kt)("inlineCode",{parentName:"p"},"onDataOnce")," will only be triggered when the request is successful. Your application can have multiple ",(0,r.kt)("inlineCode",{parentName:"p"},"onDataOnce")," callbacks."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Example"',title:'"Example"'},'// Initialize AxiosClient with the configured AxiosClientConfigurator\nconst axiosClient = new AxiosClient(axiosConfigurator);\n\n// Example of making a GET request\nconst getUser = axiosClient.get<DataType>("/user");\n\n// Listen to the request\'s success response\ngetUser.onDataOnce((data: DataType) => {\n  console.log(data); // Output: request success response\n});\n\n// Fetch the GET request with data payload\ngetUser.fetch({ id: 1 });\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"onDataOnce<DataType>(fn: (data: DataType) => void): void;\n")),(0,r.kt)("h4",{id:"data-once-change-parameters"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"fn")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"(data: DataType) => void")),(0,r.kt)("td",{parentName:"tr",align:null},"Listener function")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"data")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"DataType")),(0,r.kt)("td",{parentName:"tr",align:null},"Response data")))))}g.isMDXComponent=!0}}]);