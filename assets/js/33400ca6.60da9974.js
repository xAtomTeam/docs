"use strict";(self.webpackChunkxatom_document=self.webpackChunkxatom_document||[]).push([[8315],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),m=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=m(e.components);return a.createElement(s.Provider,{value:t},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),p=m(n),u=r,h=p["".concat(s,".").concat(u)]||p[u]||c[u]||i;return n?a.createElement(h,l(l({ref:t},d),{},{components:n})):a.createElement(h,l({ref:t},d))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[p]="string"==typeof e?e:r,l[1]=o;for(var m=2;m<i;m++)l[m]=n[m];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},683:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>m});var a=n(7462),r=(n(7294),n(3905));const i={},l=void 0,o={unversionedId:"reference/components/WFDynamicList",id:"reference/components/WFDynamicList",title:"WFDynamicList",description:"The WFDynamicList class is a powerful component within the xAtom framework that enables you to create dynamic lists seamlessly. Whether your application is fetching data from a REST API, GraphQL, or any other API source, the WFDynamicList provides essential functionality to render lists with ease. This class not only handles loading and empty states out of the box but also gives you full control over how your list items are rendered.",source:"@site/guide/reference/components/WFDynamicList.mdx",sourceDirName:"reference/components",slug:"/reference/components/WFDynamicList",permalink:"/guide/reference/components/WFDynamicList",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"WFComponent",permalink:"/guide/reference/components/WFComponent"},next:{title:"WFFormComponent",permalink:"/guide/reference/components/WFFormComponent"}},s={},m=[{value:"Getting Started",id:"getting-started",level:2},{value:"Basic List structure",id:"basic-list-structure",level:4},{value:"Initialization",id:"initialization",level:4},{value:"Selector Parameter",id:"selector-parameter",level:2},{value:"Configuration Object",id:"configuration-object",level:2},{value:"Methods",id:"methods",level:2},{value:"<code>rowRenderer(fn)</code>",id:"rowrendererfn",level:3},{value:"Syntax",id:"syntax",level:4},{value:"Parameters",id:"row-renderer-parameter",level:4},{value:"Callback Function Parameters",id:"row-renderer-fn-parameter",level:4},{value:"<code>setData(data)</code>",id:"setdatadata",level:3},{value:"Syntax",id:"syntax-1",level:4},{value:"Parameters",id:"set-data-parameter",level:4},{value:"<code>loaderRenderer(fn)</code>",id:"loaderrendererfn",level:3},{value:"Syntax",id:"syntax-2",level:4},{value:"Parameters",id:"loader-parameter",level:4},{value:"Callback Function Parameters",id:"loader-fn-parameter",level:4},{value:"<code>changeLoadingStatus(status)</code>",id:"changeloadingstatusstatus",level:3},{value:"Syntax",id:"syntax-3",level:4},{value:"Parameters",id:"loading-parameter",level:4},{value:"<code>emptyRenderer(fn)</code>",id:"emptyrendererfn",level:3},{value:"Syntax",id:"syntax-4",level:4},{value:"Parameters",id:"empty-parameter",level:4},{value:"Callback Function Parameters",id:"empty-fn-parameter",level:4},{value:"<code>forceRender()</code>",id:"forcerender",level:3},{value:"Syntax",id:"syntax-5",level:4}],d={toc:m},p="wrapper";function c(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"WFDynamicList")," class is a powerful component within the xAtom framework that enables you to create dynamic lists seamlessly. Whether your application is fetching data from a REST API, GraphQL, or any other API source, the ",(0,r.kt)("inlineCode",{parentName:"p"},"WFDynamicList")," provides essential functionality to render lists with ease. This class not only handles loading and empty states out of the box but also gives you full control over how your list items are rendered."),(0,r.kt)("h2",{id:"getting-started"},"Getting Started"),(0,r.kt)("h4",{id:"basic-list-structure"},"Basic List structure"),(0,r.kt)("p",null,"To effectively use the WFDynamicList component within the xAtom framework, ensure that your list component is structured as follows in Webflow:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"div (my-list)\n\u251c\u2500\u2500 div (my-list-item)\n\u251c\u2500\u2500 div (my-list-loader)\n\u2514\u2500\u2500 div (my-list-empty-state)\n")),(0,r.kt)("p",null,"This structure is essential for the proper functioning of the WFDynamicList component. Make sure that your webflow elements match this hierarchy to seamlessly integrate dynamic lists into your web applicatio"),(0,r.kt)("h4",{id:"initialization"},"Initialization"),(0,r.kt)("p",null,"To get started with the ",(0,r.kt)("inlineCode",{parentName:"p"},"WFDynamicList")," class, you'll need to initialize it and provide the necessary configuration options. Here's a step-by-step guide on how to begin:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Example"',title:'"Example"'},'import { WFDynamicList } from "@xatom/core";\n\n// Initialize a new instance of WFDynamicList\nconst list = new WFDynamicList<string>(".my-list", {\n  rowSelector: ".my-list-item", // CSS selector for list items\n  loaderSelector: ".my-list-loader", // Optional CSS selector for loading state\n  emptySelector: ".my-list-empty-state", // Optional selector for empty state\n});\n\n// Customize the rendering of list items\nlist.rowRenderer(({ rowData, rowElement }) => {\n  // Modify the rowElement component as needed\n  return rowElement;\n});\n\n// Set the data to be displayed in the dynamic list\nlist.setData(["Item 1", "Item 2"]);\n')),(0,r.kt)("p",null,"In this example:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"We create a new instance of ",(0,r.kt)("inlineCode",{parentName:"li"},"WFDynamicList")," by providing a query selector (",(0,r.kt)("inlineCode",{parentName:"li"},".my-list"),") that matches the container element where you want to render the list."),(0,r.kt)("li",{parentName:"ul"},"We configure the list by specifying the ",(0,r.kt)("inlineCode",{parentName:"li"},"rowSelector"),", which is a query selector that identifies individual list items within the dynamic list."),(0,r.kt)("li",{parentName:"ul"},"Optionally, we specify the ",(0,r.kt)("inlineCode",{parentName:"li"},"loaderSelector")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"emptySelector"),", which are query selectors for loading and empty state elements. These selectors are used to display loading and empty states when necessary."),(0,r.kt)("li",{parentName:"ul"},"We define a ",(0,r.kt)("inlineCode",{parentName:"li"},"rowRenderer")," function that allows you to customize the rendering of list items based on the provided data."),(0,r.kt)("li",{parentName:"ul"},"Finally, we set the data for the dynamic list using the ",(0,r.kt)("inlineCode",{parentName:"li"},"setData")," method.")),(0,r.kt)("p",null,"With these steps, you're ready to create dynamic lists in your web application using the ",(0,r.kt)("inlineCode",{parentName:"p"},"WFDynamicList")," class. You can now proceed to customize and further enhance your dynamic lists according to your project's requirements."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"new WFDynamicList(selector, configuration);\n")),(0,r.kt)("blockquote",null,(0,r.kt)("h4",{parentName:"blockquote",id:"note"},"Note"),(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"Compatibility with ",(0,r.kt)("inlineCode",{parentName:"strong"},"WFComponent"))),(0,r.kt)("p",{parentName:"blockquote"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"WFDynamicList")," seamlessly extends the capabilities of the ",(0,r.kt)("inlineCode",{parentName:"p"},"WFComponent")," class. This means that all the properties and methods available in ",(0,r.kt)("inlineCode",{parentName:"p"},"WFComponent")," are fully compatible and can be used with ",(0,r.kt)("inlineCode",{parentName:"p"},"WFDynamicList"),". This compatibility provides you with a wide range of options for enhancing and customizing the behavior of your dynamic lists. Feel free to leverage the power of both components to achieve your desired results efficiently.")),(0,r.kt)("h2",{id:"selector-parameter"},"Selector Parameter"),(0,r.kt)("p",null,"The selector parameter within ",(0,r.kt)("inlineCode",{parentName:"p"},"WFDynamicList")," is versatile and can accept one of the following types:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A string that precisely matches a valid CSS selector."),(0,r.kt)("li",{parentName:"ul"},"An HTMLElement representing a specific element in the document."),(0,r.kt)("li",{parentName:"ul"},"An existing ",(0,r.kt)("inlineCode",{parentName:"li"},"WFComponent")," instance.")),(0,r.kt)("h2",{id:"configuration-object"},"Configuration Object"),(0,r.kt)("p",null,"Along with selector parameter you'll need to provide a configuration object that includes the following properties:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Property"),(0,r.kt)("th",{parentName:"tr",align:null},"Accepted Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Required"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"rowSelector")),(0,r.kt)("td",{parentName:"tr",align:null},"A string matching a valid CSS selector, e.g., ",(0,r.kt)("inlineCode",{parentName:"td"},'".list-item"')),(0,r.kt)("td",{parentName:"tr",align:null},"Required")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"An HTMLElement representing a specific element in the document"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"An existing ",(0,r.kt)("inlineCode",{parentName:"td"},"WFComponent")," instance"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"loaderSelector")),(0,r.kt)("td",{parentName:"tr",align:null},"A string matching a valid CSS selector, e.g., ",(0,r.kt)("inlineCode",{parentName:"td"},'".loader"')),(0,r.kt)("td",{parentName:"tr",align:null},"Optional")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"An HTMLElement representing a specific element in the document"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"An existing ",(0,r.kt)("inlineCode",{parentName:"td"},"WFComponent")," instance"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"emptySelector")),(0,r.kt)("td",{parentName:"tr",align:null},"A string matching a valid CSS selector, e.g., ",(0,r.kt)("inlineCode",{parentName:"td"},'".empty-state"')),(0,r.kt)("td",{parentName:"tr",align:null},"Optional")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"An HTMLElement representing a specific element in the document"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"An existing ",(0,r.kt)("inlineCode",{parentName:"td"},"WFComponent")," instance"),(0,r.kt)("td",{parentName:"tr",align:null})))),(0,r.kt)("p",null,"By using these selectors, you can configure the ",(0,r.kt)("inlineCode",{parentName:"p"},"WFDynamicList")," class to interact with your web page's structure, customize how list items are selected, and control the display of loading and empty states. The flexibility to accept different types of selectors makes the ",(0,r.kt)("inlineCode",{parentName:"p"},"WFDynamicList")," class adaptable to various web application scenarios."),(0,r.kt)("h2",{id:"methods"},"Methods"),(0,r.kt)("h3",{id:"rowrendererfn"},(0,r.kt)("inlineCode",{parentName:"h3"},"rowRenderer(fn)")),(0,r.kt)("p",null,"This method allows you to customize the rendering of list items by providing a callback function. The callback function receives an object ",(0,r.kt)("inlineCode",{parentName:"p"},"params")," with ",(0,r.kt)("inlineCode",{parentName:"p"},"rowData"),", representing the data for the current list item; ",(0,r.kt)("inlineCode",{parentName:"p"},"rowElement"),", representing a copy of the row component; ",(0,r.kt)("inlineCode",{parentName:"p"},"data"),", the array which was set using ",(0,r.kt)("inlineCode",{parentName:"p"},"setData"),"; and ",(0,r.kt)("inlineCode",{parentName:"p"},"index"),", the index of the currently rendering item. You can modify the ",(0,r.kt)("inlineCode",{parentName:"p"},"rowElement")," and return it to control how list items are rendered."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Example"',title:'"Example"'},'// Initialize a new instance of WFDynamicList\nconst list = new WFDynamicList<string>(".my-list", {\n  rowSelector: ".my-list-item", // CSS selector for list items\n  loaderSelector: ".my-list-loader", // Optional CSS selector for loading state\n  emptySelector: ".my-list-empty-state", // Optional selector for empty state\n});\n\n// Customize the rendering of list items\nlist.rowRenderer(({ rowData, rowElement }) => {\n  // Access a child component within the list item\n  const removeBtn =\n    rowElement.getChildAsComponent(".remove-btn");\n\n  // Add a click event listener to the remove button\n  removeBtn.on("click", () => {\n    console.log("removeBtn clicked");\n  });\n\n  // Update the text of a heading element within the list item\n  rowElement.updateTextViaAttrVar({\n    title: rowData.title, // Assuming rowData contains a \'title\' property\n  });\n\n  // Return the modified rowElement component\n  return rowElement;\n});\n\n// Set the data to be displayed in the dynamic list\nlist.setData(["Item 1", "Item 2"]);\n')),(0,r.kt)("h4",{id:"syntax"},"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"rowRenderer(\n  fn: (\n    params: {\n      rowData: any;\n      rowElement: WFComponent;\n      data: any[];\n      index: number\n       }\n    ) => WFComponent\n  ): void\n")),(0,r.kt)("h4",{id:"row-renderer-parameter"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"fn")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"function")),(0,r.kt)("td",{parentName:"tr",align:null},"A callback function that receives parameters to customize the rendering of list items.")))),(0,r.kt)("h4",{id:"row-renderer-fn-parameter"},"Callback Function Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"rowData")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:null},"The data object representing the current list item.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"rowElement")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"WFComponent<R>")),(0,r.kt)("td",{parentName:"tr",align:null},"A copy of the row component for customization.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"data")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Array<T>")),(0,r.kt)("td",{parentName:"tr",align:null},"The array of data items set using ",(0,r.kt)("inlineCode",{parentName:"td"},"setData"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"index")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"number")),(0,r.kt)("td",{parentName:"tr",align:null},"The index of the currently rendering item in the list.")))),(0,r.kt)("p",null,"This method empowers you to have precise control over the rendering of list items, enabling you to create a tailored and dynamic user interface for your application's list components."),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"setdatadata"},(0,r.kt)("inlineCode",{parentName:"h3"},"setData(data)")),(0,r.kt)("p",null,"Use this method to set the data for the dynamic list. You need to pass an array ",(0,r.kt)("inlineCode",{parentName:"p"},"data")," containing the list items. The ",(0,r.kt)("inlineCode",{parentName:"p"},"data")," array can consist of objects, strings, numbers, or any other valid data types that represent the content of the list."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Example"',title:'"Example"'},'// Initialize a new instance of WFDynamicList\nconst list = new WFDynamicList<string>(".my-list", {\n  rowSelector: ".my-list-item", // CSS selector for list items\n  loaderSelector: ".my-list-loader", // Optional CSS selector for loading state\n  emptySelector: ".my-list-empty-state", // Optional selector for empty state\n});\n\n// Customize the rendering of list items\nlist.rowRenderer(({ rowData, rowElement }) => {\n  // Return the modified rowElement component\n  return rowElement;\n});\n\n// Set the data to be displayed in the dynamic list\nlist.setData(["Item 1", "Item 2"]);\n')),(0,r.kt)("h4",{id:"syntax-1"},"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"setData(data:T[]):void\n")),(0,r.kt)("h4",{id:"set-data-parameter"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"data")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"T[]")),(0,r.kt)("td",{parentName:"tr",align:null},"The ",(0,r.kt)("inlineCode",{parentName:"td"},"data")," array can consist of objects, strings, numbers, or any other valid data types that represent the content of the list.")))),(0,r.kt)("p",null,"This method allows you to update the dynamic list with new data, making it easy to refresh the list with updated or different content as needed."),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"loaderrendererfn"},(0,r.kt)("inlineCode",{parentName:"h3"},"loaderRenderer(fn)")),(0,r.kt)("p",null,"This method takes a callback function to control the rendering of the loading state. When invoked, the function should return an ",(0,r.kt)("inlineCode",{parentName:"p"},"WFComponent")," instance representing the loading state of the dynamic list."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Example"',title:'"Example"'},'// Initialize a new instance of WFDynamicList\nconst list = new WFDynamicList<string>(".my-list", {\n  rowSelector: ".my-list-item", // CSS selector for list items\n  loaderSelector: ".my-list-loader", // Optional CSS selector for loading state\n  emptySelector: ".my-list-empty-state", // Optional selector for empty state\n});\n\n// Customize the rendering of list items\nlist.rowRenderer(({ rowData, rowElement }) => {\n  // Return the modified rowElement component\n  return rowElement;\n});\n\n// Customize the rendering of loader\nlist.loaderRenderer((loader) => {\n  // Customize the loader component as needed\n  const loadingText =\n    loader.getChildAsComponent(".loading-text");\n  loadingText.setText("Please wait..."); // Update loading text\n  loader.setStyle({\n    backgroundColor: "#fff", // Change background color\n  });\n\n  // Return the modified loader component\n  return loader;\n});\n\n// Set the data to be displayed in the dynamic list\nlist.setData(["Item 1", "Item 2"]);\n')),(0,r.kt)("h4",{id:"syntax-2"},"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"loaderRenderer(fn: (loaderElement:WFComponent) => WFComponent): void\n")),(0,r.kt)("h4",{id:"loader-parameter"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"fn")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"function")),(0,r.kt)("td",{parentName:"tr",align:null},"A callback function that receives parameters to customize the rendering of loader.")))),(0,r.kt)("h4",{id:"loader-fn-parameter"},"Callback Function Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"loaderElement")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"WFComponent<L>")),(0,r.kt)("td",{parentName:"tr",align:null},"A copy of the loader component for customization.")))),(0,r.kt)("p",null,"This method allows you to customize the appearance and behavior of the loading state in the dynamic list, giving you full control over how it's presented to users."),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"changeloadingstatusstatus"},(0,r.kt)("inlineCode",{parentName:"h3"},"changeLoadingStatus(status)")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"changeLoadingStatus")," method allows you to change the loading status of the dynamic list by passing a boolean value ",(0,r.kt)("inlineCode",{parentName:"p"},"status"),". If the list contains items and the loading status is set to ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),", a loader will be displayed at the bottom of the list."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Example"',title:'"Example"'},'// Initialize a new instance of WFDynamicList\nconst list = new WFDynamicList<string>(".my-list", {\n  rowSelector: ".my-list-item", // CSS selector for list items\n  loaderSelector: ".my-list-loader", // Optional CSS selector for loading state\n  emptySelector: ".my-list-empty-state", // Optional selector for empty state\n});\n\nconst loadMoreBtn = new WFComponent(".load-more-btn");\n\n// Customize the rendering of list items\nlist.rowRenderer(({ rowData, rowElement }) => {\n  // Return the modified rowElement component\n  return rowElement;\n});\n\nloadMoreBtn.on("click", () => {\n  // Enable the loading state\n  list.changeLoadingStatus(true);\n  // Perform additional actions here (e.g., fetching more data)\n\n  // Disable the loading state\n  list.changeLoadingStatus(false);\n});\n\n// Set the data to be displayed in the dynamic list\nlist.setData(["Item 1", "Item 2"]);\n')),(0,r.kt)("h4",{id:"syntax-3"},"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"changeLoadingStatus(status: boolean): void\n")),(0,r.kt)("h4",{id:"loading-parameter"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"status")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"boolean")),(0,r.kt)("td",{parentName:"tr",align:null},"Indicate the loading state")))),(0,r.kt)("p",null,"This method provides control over when and how the loading state is displayed in the dynamic list, giving you the flexibility to manage the loading behavior according to your application's requirements."),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"emptyrendererfn"},(0,r.kt)("inlineCode",{parentName:"h3"},"emptyRenderer(fn)")),(0,r.kt)("p",null,"This method enables you to customize the rendering of the empty state of the dynamic list. It takes a callback function that should return an ",(0,r.kt)("inlineCode",{parentName:"p"},"WFComponent")," representing the empty state when invoked. The empty state will automatically render when the list is empty."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Example"',title:'"Example"'},'// Initialize a new instance of WFDynamicList\nconst list = new WFDynamicList<string>(".my-list", {\n  rowSelector: ".my-list-item", // CSS selector for list items\n  loaderSelector: ".my-list-loader", // Optional CSS selector for loading state\n  emptySelector: ".my-list-empty-state", // Optional selector for empty state\n});\n\n// Customize the rendering of list items\nlist.rowRenderer(({ rowData, rowElement }) => {\n  // Return the modified rowElement component\n  return rowElement;\n});\n\n// Customize the rendering of empty state\nlist.emptyRenderer((emptyStateElement) => {\n  // Customize the empty state component as needed\n  const emptyText =\n    emptyStateElement.getChildAsComponent(".empty-text");\n  emptyText.setText(\n    isSearchResult ? "No Item Found" : "Looks like list is empty"\n  ); // Update empty state text\n\n  // Return the modified empty state component\n  return emptyStateElement;\n});\n\n// Set the data to be displayed in the dynamic list\nlist.setData(["Item 1", "Item 2"]);\n')),(0,r.kt)("h4",{id:"syntax-4"},"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"emptyRenderer(fn: (emptyStateElement:WFComponent) => WFComponent): void\n")),(0,r.kt)("h4",{id:"empty-parameter"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"fn")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"function")),(0,r.kt)("td",{parentName:"tr",align:null},"A callback function that receives parameters to customize the rendering of empty state.")))),(0,r.kt)("h4",{id:"empty-fn-parameter"},"Callback Function Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"emptyStateElement")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"WFComponent<L>")),(0,r.kt)("td",{parentName:"tr",align:null},"A copy of the empty state component for customization.")))),(0,r.kt)("p",null,"This method allows you to have complete control over how the empty state of the dynamic list is displayed. You can design and customize the empty state component to provide a meaningful and engaging user experience when the list is empty."),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"forcerender"},(0,r.kt)("inlineCode",{parentName:"h3"},"forceRender()")),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"forceRender")," method to forcefully re-render the dynamic list. This method is particularly useful when you want to refresh the list display after making changes using ",(0,r.kt)("inlineCode",{parentName:"p"},"setData")," or other methods."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Example"',title:'"Example"'},'// Initialize a new instance of WFDynamicList\nconst list = new WFDynamicList<string>(".my-list", {\n  rowSelector: ".my-list-item", // CSS selector for list items\n  loaderSelector: ".my-list-loader", // Optional CSS selector for loading state\n  emptySelector: ".my-list-empty-state", // Optional selector for empty state\n});\n\n// Customize the rendering of list items\nlist.rowRenderer(({ rowData, rowElement }) => {\n  // Return the modified rowElement component\n  return rowElement;\n});\n\n// Set the data to be displayed in the dynamic list\nlist.setData(["Item 1", "Item 2"]);\n\n// Trigger a force render to refresh the list\nlist.forceRender();\n')),(0,r.kt)("h4",{id:"syntax-5"},"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"forceRender(): void\n")),(0,r.kt)("p",null,"These methods provide you with the flexibility to control the rendering of list items, loading states, and empty states, ensuring a seamless and customized user experience when working with dynamic lists in your web application."))}c.isMDXComponent=!0}}]);